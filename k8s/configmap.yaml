apiVersion: v1
kind: ConfigMap
metadata:
  name: todo-app-code
data:
  app.js: |
    const express = require('express');
    const { Pool } = require('pg');
    const redis = require('redis');

    const app = express();
    app.use(express.json());

    // Database connections
    const pool = new Pool({
      user: process.env.DB_USER || 'postgres',
      host: process.env.DB_HOST || 'postgres-service',
      database: process.env.DB_NAME || 'todos',
      password: process.env.DB_PASSWORD || 'password',
      port: 5432,
    });

    const redisClient = redis.createClient({
      host: process.env.REDIS_HOST || 'redis-service',
      port: 6379
    });

    // Initialize database
    async function initDB() {
      try {
        await pool.query(`
          CREATE TABLE IF NOT EXISTS todos (
            id SERIAL PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            description TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
        `);
        console.log('Database initialized');
      } catch (err) {
        console.error('Database init error:', err);
      }
    }

    // Health check
    app.get('/health', (req, res) => {
      res.json({ status: 'healthy', timestamp: new Date().toISOString() });
    });

    // Get all todos
    app.get('/todos', async (req, res) => {
      try {
        const result = await pool.query('SELECT * FROM todos ORDER BY id');
        res.json(result.rows);
      } catch (err) {
        res.status(500).json({ error: err.message });
      }
    });

    // Create todo
    app.post('/todos', async (req, res) => {
      try {
        const { title, description } = req.body;
        const result = await pool.query(
          'INSERT INTO todos (title, description) VALUES ($1, $2) RETURNING *',
          [title, description]
        );
        res.status(201).json(result.rows[0]);
      } catch (err) {
        res.status(500).json({ error: err.message });
      }
    });

    // Delete todo
    app.delete('/todos/:id', async (req, res) => {
      try {
        const { id } = req.params;
        await pool.query('DELETE FROM todos WHERE id = $1', [id]);
        res.json({ message: 'Todo deleted' });
      } catch (err) {
        res.status(500).json({ error: err.message });
      }
    });

    const PORT = process.env.PORT || 3000;
    
    initDB().then(() => {
      app.listen(PORT, () => {
        console.log(`Server running on port ${PORT}`);
      });
    });

  package.json: |
    {
      "name": "todo-api",
      "version": "1.0.0", 
      "main": "app.js",
      "scripts": {
        "start": "node app.js"
      },
      "dependencies": {
        "express": "^4.18.2",
        "pg": "^8.8.0",
        "redis": "^4.5.1"
      }
    }
